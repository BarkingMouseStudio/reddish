// Generated by CoffeeScript 1.3.3
(function() {
  var base64, proxies_set, proxy_key_salt, redback, sha1, url, _, _ref, _ref1;

  url = require('url');

  _ = require('underscore');

  _ref = require('./common'), redback = _ref.redback, proxies_set = _ref.proxies_set;

  _ref1 = require('./utils'), sha1 = _ref1.sha1, base64 = _ref1.base64;

  proxy_key_salt = require('./config').proxy_key_salt;

  exports.get = function(sessionId, callback) {
    var connections, key;
    connections = redback.createHash(key = "connections:" + sessionId);
    return connections.get(function(err, connections) {
      if (err) {
        callback(err);
        return;
      }
      connections = _.map(connections, function(connection) {
        return JSON.parse(connection);
      });
      return callback(null, connections);
    });
  };

  exports.post = function(sessionId, connection, callback) {
    var auth, connections, hostname, id, key, name, name_parts, password, port, protocol, requires_pass, username, _ref2, _ref3;
    connections = redback.createHash(key = "connections:" + sessionId);
    name = connection.name, requires_pass = connection.requires_pass;
    if (!name) {
      callback(new Error('Name or url required'));
      return;
    }
    _ref2 = name_parts = url.parse(name), hostname = _ref2.hostname, protocol = _ref2.protocol, port = _ref2.port;
    if (!(hostname && protocol === 'redis:')) {
      id = base64(name);
      key = sha1("" + name + "." + (Date.now()), proxy_key_salt);
      connection = {
        type: 'name',
        name: name,
        id: id,
        key: key,
        requires_pass: false
      };
    } else {
      name = url.format(name_parts);
      connection = {
        type: 'url',
        name: name,
        id: id = base64(name),
        key: null,
        requires_pass: !!requires_pass
      };
      auth = name_parts.auth;
      if (auth) {
        _ref3 = auth.split(':'), username = _ref3[0], password = _ref3[1];
        if (password) {
          connection['password'] = password;
        }
      }
    }
    return connections.set(id, JSON.stringify(connection), function(err, reply) {
      if (err) {
        callback(err);
        return;
      }
      key = connection.key;
      if (key) {
        proxies_set.add(key);
      }
      return callback(null, connection);
    });
  };

  exports.del = function(sessionId, id, callback) {
    var connections, key;
    key = "connections:" + sessionId;
    connections = redback.createHash(key);
    return connections.del(id, function(err, reply) {
      if (err) {
        callback(err);
        return;
      }
      proxies_set.remove(key);
      return callback(null, !!reply);
    });
  };

}).call(this);
