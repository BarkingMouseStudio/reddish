// Generated by CoffeeScript 1.3.3
(function() {
  var Endpoint, proxies, proxies_set, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('./common'), proxies = _ref.proxies, proxies_set = _ref.proxies_set;

  module.exports = Endpoint = (function() {

    Endpoint.keyRegex = /^[a-f0-9]{40}$/;

    Endpoint.prototype.handleError = function(err) {
      return console.error("" + this.name + "-proxy:close", err != null ? err.message : void 0);
    };

    Endpoint.prototype.handleConnect = function(proxy) {
      this.proxy = proxy;
      console.log("" + this.name + "-proxy:connected");
      this.proxy.on('close', this.handleError);
      this.proxy.on('error', this.handleError);
      return this.proxy.on('data', this.handleData);
    };

    Endpoint.prototype.handleListen = function() {
      return console.log("" + this.name + "-proxy:listening:" + this.port);
    };

    Endpoint.prototype.handleHandshake = function(err, reply) {
      var proxy_key;
      if (err || !reply) {
        console.error("" + this.name + "-@proxy:handshake:failed:invalid");
        this.proxy.end(JSON.stringify({
          error: 'Invalid connection key'
        }));
        return;
      }
      this.proxy.connect = function() {};
      this.proxy.removeAllListeners('data');
      this.proxy.write(JSON.stringify({
        success: true
      }));
      proxies.set(proxy_key = "" + this.key + ":" + this.postfix, this.proxy);
      return console.log("" + this.name + "-@proxy:handshake:success", proxy_key);
    };

    Endpoint.prototype.handleData = function(data) {
      var json;
      try {
        json = JSON.parse(data.toString());
        this.key = json.key;
        if (!(this.key && Endpoint.keyRegex.test(this.key))) {
          console.error("" + this.name + "-@proxy:handshake:failed:invalid");
          this.proxy.end(JSON.stringify({
            error: 'Invalid connection key'
          }));
          return;
        }
        return proxies_set.exists(this.key, this.handleHandshake);
      } catch (err) {
        console.error("" + this.name + "-@proxy:handshake:failed:error", err != null ? err.message : void 0);
        return this.proxy.end(JSON.stringify({
          error: 'Invalid handshake data'
        }));
      }
    };

    function Endpoint(port, postfix, is_secure, options) {
      var net, tls;
      this.port = port;
      this.postfix = postfix;
      this.is_secure = is_secure;
      this.options = options;
      this.handleData = __bind(this.handleData, this);

      this.handleHandshake = __bind(this.handleHandshake, this);

      this.handleListen = __bind(this.handleListen, this);

      this.handleConnect = __bind(this.handleConnect, this);

      this.handleError = __bind(this.handleError, this);

      this.name = this.postfix.toLowerCase();
      if (this.is_secure) {
        tls = require('tls');
        this.endpoint = tls.createServer(this.options, this.handleConnect);
      } else {
        net = require('net');
        this.endpoint = net.createServer(this.options, this.handleConnect);
      }
      this.endpoint.listen(this.port, this.handleListen);
    }

    return Endpoint;

  })();

}).call(this);
